name: CD - Deploy para Staging e Produção

on:
  workflow_run:
    workflows: ["CI - Compilação e Testes"]
    branches: [develop, main, master]
    types:
      - completed

jobs:
  deploy-to-staging:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'develop' }}
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        
      - name: Configurar JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Compilar serviço Users
        working-directory: ./users
        run: mvn clean package -DskipTests
          
      - name: Compilar serviço Sprinkler
        working-directory: ./sprinkler
        run: mvn clean package -DskipTests
          
      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Build e Push da imagem Docker Users (Staging)
        uses: docker/build-push-action@v4
        with:
          context: ./users
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fiap-users:staging
          
      - name: Build e Push da imagem Docker Sprinkler (Staging)
        uses: docker/build-push-action@v4
        with:
          context: ./sprinkler
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fiap-sprinkler:staging
          
      - name: Deploy para o ambiente de Staging
        run: |
          # Esta é uma simulação do deployment - substitua pelos comandos reais
          echo "Deployando para o ambiente de Staging"
          # Exemplo: usando SSH para executar o docker-compose em um servidor remoto
          # ssh ${{ secrets.STAGING_SERVER_USER }}@${{ secrets.STAGING_SERVER_HOST }} "cd /path/to/app && docker-compose -f docker-compose-staging.yml pull && docker-compose -f docker-compose-staging.yml up -d"

  deploy-to-production:
    if: ${{ github.event.workflow_run.conclusion == 'success' && (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'master') }}
    runs-on: ubuntu-latest
    environment: production
    needs: []  # Sem dependências diretas, pois depende da condição if
    
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        
      - name: Configurar JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Compilar serviço Users
        working-directory: ./users
        run: mvn clean package -DskipTests
          
      - name: Compilar serviço Sprinkler
        working-directory: ./sprinkler
        run: mvn clean package -DskipTests
          
      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Build e Push da imagem Docker Users (Produção)
        uses: docker/build-push-action@v4
        with:
          context: ./users
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fiap-users:latest,${{ secrets.DOCKER_HUB_USERNAME }}/fiap-users:${{ github.sha }}
          
      - name: Build e Push da imagem Docker Sprinkler (Produção)
        uses: docker/build-push-action@v4
        with:
          context: ./sprinkler
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fiap-sprinkler:latest,${{ secrets.DOCKER_HUB_USERNAME }}/fiap-sprinkler:${{ github.sha }}
          
      - name: Deploy para o ambiente de Produção
        run: |
          # Esta é uma simulação do deployment - substitua pelos comandos reais
          echo "Deployando para o ambiente de Produção"
          # Exemplo: usando SSH para executar o docker-compose em um servidor remoto
          # ssh ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} "cd /path/to/app && docker-compose -f docker-compose-prod.yml pull && docker-compose -f docker-compose-prod.yml up -d"
