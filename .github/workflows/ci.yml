name: CI/CD - Compila√ß√£o, Testes e Deploy

on:
  push:
    branches: [ '*' ]  # Ativar para qualquer branch
  pull_request:
    branches: [ main, develop, master ]

jobs:
  # Job para compilar o c√≥digo
  build:
    name: Compilar aplica√ß√µes
    runs-on: ubuntu-latest
    outputs:
      build_status: ${{ job.status }}

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Compilar servi√ßo Users
        working-directory: ./users
        run: |
          mvn clean package -DskipTests

      - name: Compilar servi√ßo Sprinkler
        working-directory: ./sprinkler
        run: |
          mvn clean package -DskipTests

      - name: Upload do artefato Users
        uses: actions/upload-artifact@v4
        with:
          name: users-artifact
          path: ./users/target/*.jar

      - name: Upload do artefato Sprinkler
        uses: actions/upload-artifact@v4
        with:
          name: sprinkler-artifact
          path: ./sprinkler/target/*.jar
      
      # Login no Docker Hub
      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      # Definir nome e tag da imagem baseado na branch
      - name: Definir ambiente
        id: set-env
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "develop" || "$BRANCH_NAME" == "developer" ]]; then
            echo "ENV=staging" >> $GITHUB_ENV
          else
            echo "ENV=dev" >> $GITHUB_ENV
          fi
      
      # Build e Push da imagem Docker Users
      - name: Build e Push da imagem Docker Users
        uses: docker/build-push-action@v4
        with:
          context: ./users
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/fiap-users:${{ env.ENV }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/fiap-users:${{ env.ENV }}-${{ github.sha }}
      
      # Build e Push da imagem Docker Sprinkler
      - name: Build e Push da imagem Docker Sprinkler
        uses: docker/build-push-action@v4
        with:
          context: ./sprinkler
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/fiap-sprinkler:${{ env.ENV }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/fiap-sprinkler:${{ env.ENV }}-${{ github.sha }}
            
  # Job para executar testes BDD
  tests-bdd:
    name: Executar Testes BDD
    needs: build # S√≥ executar ap√≥s a compila√ß√£o bem-sucedida
    if: needs.build.result == 'success' # S√≥ executar se a compila√ß√£o foi bem-sucedida
    runs-on: ubuntu-latest
    outputs:
      tests_passed: ${{ steps.set_result.outputs.tests_passed }}

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      
      # Inicializar status como sucesso
      - name: Inicializar status
        run: echo "tests_status=success" >> $GITHUB_ENV
            
      # Executar testes BDD no microsservi√ßo Users
      - name: Testes BDD - Users
        id: users_tests
        working-directory: ./users
        continue-on-error: true # Permite continuar para registrar a falha
        run: |
          echo "### üß™ Executando testes BDD no m√≥dulo Users..."
          ./mvnw test -Dtest=br.com.fiap.users.bdd.CucumberRunnerTest \
            -Dmaven.test.failure.ignore=false \
            -Dfail-fast \
            -Dcucumber.features=src/test/resources/features \
            -Dcucumber.glue=br.com.fiap.users.bdd.steps,br.com.fiap.users.bdd.config
            
      # Verificar resultado dos testes Users
      - name: Verificar testes Users
        if: steps.users_tests.outcome != 'success'
        run: |
          echo "::error::‚ùå TESTES DO USU√ÅRIO FALHARAM! Deploy ser√° bloqueado."
          echo "tests_status=failure" >> $GITHUB_ENV

      # Executar testes BDD no microsservi√ßo Sprinkler (s√≥ se Users passar)
      - name: Testes BDD - Sprinkler
        id: sprinkler_tests
        if: steps.users_tests.outcome == 'success'
        working-directory: ./sprinkler
        continue-on-error: true # Permite continuar para registrar a falha
        run: |
          echo "### üß™ Executando testes BDD no m√≥dulo Sprinkler..."
          ./mvnw test -Dtest=br.com.fiap.aspersor.bdd.CucumberRunnerTest \
            -Dmaven.test.failure.ignore=false \
            -Dfail-fast \
            -Dcucumber.features=src/test/resources/features \
            -Dcucumber.glue=br.com.fiap.aspersor.bdd.steps,br.com.fiap.aspersor.bdd

      # Verificar resultado dos testes Sprinkler
      - name: Verificar testes Sprinkler
        if: steps.sprinkler_tests.outcome != 'success'
        run: |
          echo "::error::‚ùå TESTES DO ASPERSOR FALHARAM! Deploy ser√° bloqueado."
          echo "tests_status=failure" >> $GITHUB_ENV
      
      # Definir resultado final para os pr√≥ximos jobs
      - name: Definir resultado final
        id: set_result
        run: |
          if [ "${{ env.tests_status }}" == "failure" ]; then
            echo "::error::‚ùå TESTES FALHARAM! A pipeline foi interrompida."
            echo "tests_passed=false" >> $GITHUB_OUTPUT
            exit 1 # Falha o job se qualquer teste falhou
          else
            echo "tests_passed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ TODOS OS TESTES PASSARAM COM SUCESSO!"
          fi
            
      # Publicar relat√≥rios como artefatos
      - name: Publicar relat√≥rios
        if: always() # Sempre execute para ter os relat√≥rios, mesmo em caso de falha
        uses: actions/upload-artifact@v4
        with:
          name: relatorios-testes
          path: |
            **/target/cucumber-reports
            **/target/surefire-reports
          retention-days: 7
          
  # Job de deploy - S√≥ √© executado se os testes passarem
  deploy:
    name: Deploy das Aplica√ß√µes
    needs: [build, tests-bdd] # Depende da compila√ß√£o e dos testes BDD
    if: ${{ needs.tests-bdd.outputs.tests_passed == 'true' }} # S√≥ executa se os testes passaram
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
        
      # Login no Docker Hub (provavelmente j√° feito, mas por seguran√ßa)
      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      # Definir ambiente baseado na branch
      - name: Definir ambiente
        id: set-deploy-env
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
            echo "ENV=prod" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "develop" || "$BRANCH_NAME" == "developer" ]]; then
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
            echo "ENV=staging" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=development" >> $GITHUB_ENV
            echo "ENV=dev" >> $GITHUB_ENV
          fi

      # Deploy para o ambiente adequado
      - name: Deploy para ${{ env.DEPLOY_ENV }}
        run: |
          echo "‚úÖ INICIANDO DEPLOY PARA ${{ env.DEPLOY_ENV }}..."
          echo "Imagens Docker foram publicadas com sucesso no Docker Hub:"
          echo "  - ${{ secrets.DOCKER_HUB_USERNAME }}/fiap-users:${{ env.ENV }}"
          echo "  - ${{ secrets.DOCKER_HUB_USERNAME }}/fiap-users:${{ env.ENV }}-${{ github.sha }}"
          echo "  - ${{ secrets.DOCKER_HUB_USERNAME }}/fiap-sprinkler:${{ env.ENV }}"
          echo "  - ${{ secrets.DOCKER_HUB_USERNAME }}/fiap-sprinkler:${{ env.ENV }}-${{ github.sha }}"
          
          # Aqui seriam os comandos reais de deploy
          # Por exemplo, atualizar um cluster Kubernetes ou executar scripts de deploy
          
          echo "‚úÖ DEPLOY CONCLU√çDO COM SUCESSO!"
          echo "Para executar localmente, use: docker-compose -f docker-compose-${{ env.ENV }}.yml up -d"
